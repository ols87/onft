/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "ExampleNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExampleNFT__factory>;
    getContractFactory(
      name: "ILayerZeroEndpoint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILayerZeroEndpoint__factory>;
    getContractFactory(
      name: "ILayerZeroReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILayerZeroReceiver__factory>;
    getContractFactory(
      name: "ILayerZeroUserApplicationConfig",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILayerZeroUserApplicationConfig__factory>;
    getContractFactory(
      name: "IONFT721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IONFT721__factory>;
    getContractFactory(
      name: "IONFT721Core",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IONFT721Core__factory>;
    getContractFactory(
      name: "LzApp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LzApp__factory>;
    getContractFactory(
      name: "NonblockingLzApp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NonblockingLzApp__factory>;
    getContractFactory(
      name: "LZEndpointMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LZEndpointMock__factory>;
    getContractFactory(
      name: "ONFT721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ONFT721__factory>;
    getContractFactory(
      name: "ONFT721Core",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ONFT721Core__factory>;
    getContractFactory(
      name: "UniversalONFT721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniversalONFT721__factory>;

    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "ExampleNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExampleNFT>;
    getContractAt(
      name: "ILayerZeroEndpoint",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILayerZeroEndpoint>;
    getContractAt(
      name: "ILayerZeroReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILayerZeroReceiver>;
    getContractAt(
      name: "ILayerZeroUserApplicationConfig",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILayerZeroUserApplicationConfig>;
    getContractAt(
      name: "IONFT721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IONFT721>;
    getContractAt(
      name: "IONFT721Core",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IONFT721Core>;
    getContractAt(
      name: "LzApp",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LzApp>;
    getContractAt(
      name: "NonblockingLzApp",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NonblockingLzApp>;
    getContractAt(
      name: "LZEndpointMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LZEndpointMock>;
    getContractAt(
      name: "ONFT721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ONFT721>;
    getContractAt(
      name: "ONFT721Core",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ONFT721Core>;
    getContractAt(
      name: "UniversalONFT721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniversalONFT721>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
